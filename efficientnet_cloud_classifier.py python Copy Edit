import os
import torch
import torch.nn as nn
from torchvision import datasets, transforms, models
from torch.utils.data import DataLoader, random_split
from torch.cuda.amp import GradScaler, autocast
from sklearn.metrics import classification_report, confusion_matrix
import numpy as np

#  Parameters #
DATA_DIR = r"C:\DL_project\dataset"  # your dataset folder with subfolders
MODEL_PATH = "efficientnet_precipitation_model.pth"
NUM_CLASSES = 3
BATCH_SIZE = 16
EPOCHS = 24
IMG_SIZE = 480

#  Transformations (Match Paper) #
transform = transforms.Compose([
    transforms.Resize((IMG_SIZE, IMG_SIZE)),
    transforms.ToTensor(),
    transforms.Normalize([0.5]*3, [0.5]*3)
])

#  Load Dataset from Subfolders #
dataset = datasets.ImageFolder(DATA_DIR, transform=transform)
class_names = dataset.classes

# Train-Validation Split (80/20) #
train_size = int(0.8 * len(dataset))
val_size = len(dataset) - train_size
train_dataset, val_dataset = random_split(dataset, [train_size, val_size])

train_loader = DataLoader(train_dataset, batch_size=BATCH_SIZE, shuffle=True)
val_loader = DataLoader(val_dataset, batch_size=BATCH_SIZE, shuffle=False)

#  Model: EfficientNet-B7 with Dropout #
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model = models.efficientnet_b7(weights=models.EfficientNet_B7_Weights.IMAGENET1K_V1)
in_features = model.classifier[1].in_features
model.classifier = nn.Sequential(
    nn.Dropout(p=0.5),
    nn.Linear(in_features, NUM_CLASSES)
)
model = model.to(device)

# Loss Function, Optimizer, AMP #
criterion = nn.CrossEntropyLoss()
optimizer = torch.optim.Adam(model.parameters(), lr=0.001)
scaler = GradScaler()

# Training Loop #
print("üìö Starting Training...\n")
for epoch in range(1, EPOCHS + 1):
    model.train()
    train_loss, correct, total = 0.0, 0, 0

    for images, labels in train_loader:
        images, labels = images.to(device), labels.to(device)
        optimizer.zero_grad()

        with autocast():
            outputs = model(images)
            loss = criterion(outputs, labels)

        scaler.scale(loss).backward()
        scaler.step(optimizer)
        scaler.update()

        train_loss += loss.item()
        _, predicted = torch.max(outputs.data, 1)
        correct += (predicted == labels).sum().item()
        total += labels.size(0)

    acc = 100 * correct / total
    print(f"Epoch [{epoch}/{EPOCHS}] ‚û§ Loss: {train_loss/len(train_loader):.4f}, Accuracy: {acc:.2f}%")

# Save the Trained Model #
torch.save(model.state_dict(), MODEL_PATH)
print(f"\n‚úÖ Model saved to: {MODEL_PATH}\n")

#  Evaluation on Validation Set #
print("üîç Evaluating on Validation Set...\n")
model.eval()
val_labels = []
val_preds = []

with torch.no_grad():
    for images, labels in val_loader:
        images = images.to(device)
        outputs = model(images)
        _, predicted = torch.max(outputs.data, 1)
        val_preds.extend(predicted.cpu().numpy())
        val_labels.extend(labels.numpy())

#  Classification Report #
print("üìä Classification Report:")
print(classification_report(val_labels, val_preds, target_names=class_names))

#  Confusion Matrix #
print("üß© Confusion Matrix:")
print(confusion_matrix(val_labels, val_preds))
